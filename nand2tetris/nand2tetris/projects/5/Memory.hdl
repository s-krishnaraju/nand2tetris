// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // we somehow need to be able to determine which memory to touch
    // pick keyboard if address[0] and address[1] are both turned on
    // otherwise pick screen if address[0] turned on
    // otherwise pick ram
    // if MSB off ram
    Mux16(a=none, b =oldram, sel = address[0])
    // if addr[0] and addr[1] on then keyboard else screen
    Mux16(a = oldscreen, b = oldkeyboard, sel=address[1])

    RAM16K(in=, load=, address=, out=)
    Screen(in=, load=, address=, out=)
    Keyboard(in=, load=, out=)

    // maybe use these to track previous state
    Register()
    Register()
    Register()
}
