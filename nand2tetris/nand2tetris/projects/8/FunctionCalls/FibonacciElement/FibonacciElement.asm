@256
D=A
@SP
M=D
@INIT$ret0
D=A
@SP
A=M
M=D
@SP
M=M+1

@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1

@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1

@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1

@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1

@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(INIT$ret0)
//function Sys.init 0
(Sys.init)
//	push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//	call Main.fibonacci 1
@Sys.init$ret1
D=A
@SP
A=M
M=D
@SP
M=M+1

@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1

@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1

@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1

@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1

@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Sys.init$ret1)
//label END  
(Sys.init$END)
//	goto END  // loops infinitely
@Sys.init$END
0;JMP
//function Main.fibonacci 0
(Main.fibonacci)
//	push argument 0
@0
D=A
@ARG
D=D+M
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
//	push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//	lt                     
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
D=M-D
@Main.TRUE1
D;JLT
D=0
@Main.FALSE1
0;JMP
(Main.TRUE1)
D=-1
(Main.FALSE1)
@SP
A=M
M=D
@SP
M=M+1
//	if-goto N_LT_2        
@SP
M=M-1
@SP
A=M
D=M

@Main.fibonacci$N_LT_2
D;JNE
//	goto N_GE_2
@Main.fibonacci$N_GE_2
0;JMP
//label N_LT_2               // if n < 2 returns n
(Main.fibonacci$N_LT_2)
//	push argument 0        
@0
D=A
@ARG
D=D+M
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
//	return
@LCL
D=M
@frame
M=D
@5
D=A
@frame
A=M-D
D=M
@retAddr
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@1
D=A
@frame
A=M-D
D=M
@THAT
M=D
@2
D=A
@frame
A=M-D
D=M
@THIS
M=D
@3
D=A
@frame
A=M-D
D=M
@ARG
M=D
@4
D=A
@frame
A=M-D
D=M
@LCL
M=D
@retAddr
A=M
0;JMP
//label N_GE_2               // if n >= 2 returns fib(n - 2) + fib(n - 1)
(Main.fibonacci$N_GE_2)
//	push argument 0
@0
D=A
@ARG
D=D+M
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
//	push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//	sub
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
D=M-D
@SP
A=M
M=D
@SP
M=M+1
//	call Main.fibonacci 1  // computes fib(n - 2)
@Main.fibonacci$ret2
D=A
@SP
A=M
M=D
@SP
M=M+1

@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1

@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1

@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1

@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1

@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret2)
//	push argument 0
@0
D=A
@ARG
D=D+M
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
//	push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//	sub
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
D=M-D
@SP
A=M
M=D
@SP
M=M+1
//	call Main.fibonacci 1  // computes fib(n - 1)
@Main.fibonacci$ret3
D=A
@SP
A=M
M=D
@SP
M=M+1

@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1

@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1

@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1

@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1

@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret3)
//	add                    // returns fib(n - 1) + fib(n - 2)
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
D=D+M
@SP
A=M
M=D
@SP
M=M+1
//	return
@LCL
D=M
@frame
M=D
@5
D=A
@frame
A=M-D
D=M
@retAddr
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@1
D=A
@frame
A=M-D
D=M
@THAT
M=D
@2
D=A
@frame
A=M-D
D=M
@THIS
M=D
@3
D=A
@frame
A=M-D
D=M
@ARG
M=D
@4
D=A
@frame
A=M-D
D=M
@LCL
M=D
@retAddr
A=M
0;JMP
(END)
@END
0;JMP
