//	push constant 0    
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//	pop local 0         // sum = 0
@0
D=A
@LCL
M=M+D
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
@0
D=A
@LCL
M=M-D
//label LOOP
($LOOP)
//	push argument 0     
@0
D=A
@ARG
D=D+M
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
//	push local 0
@0
D=A
@LCL
D=D+M
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
//	add
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
D=D+M
@SP
A=M
M=D
@SP
M=M+1
//	pop local 0	        // sum = sum + n
@0
D=A
@LCL
M=M+D
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
@0
D=A
@LCL
M=M-D
//	push argument 0
@0
D=A
@ARG
D=D+M
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
//	push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//	sub
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
D=M-D
@SP
A=M
M=D
@SP
M=M+1
//	pop argument 0      // n--
@0
D=A
@ARG
M=M+D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@0
D=A
@ARG
M=M-D
//	push argument 0
@0
D=A
@ARG
D=D+M
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
//	if-goto LOOP        // if n > 0, goto LOOP
@SP
M=M-1
@SP
A=M
D=M

@$LOOP
D;JNE
//	push local 0        // else, pushes sum to the stack's top
@0
D=A
@LCL
D=D+M
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
(END)
@END
0;JMP
