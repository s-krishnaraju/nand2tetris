// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int SCREEN_START, END_ROW, END_COL;
    static boolean COLOR;
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)


    // one pixel is one bit
    /** Initializes the Screen. */
    function void init() {
        var int i, pwr;
        // each pixel is one bit
        // so 16 pixels per word and 32*16 (512) per row
        let END_ROW = 256;
        let END_COL = 512; 
        let SCREEN_START = 16384;
        let COLOR = false;

        let powersOfTwo = Array.new(16);
        while(i<16){
           let powersOfTwo[i] = pwr;
           let pwr = pwr + pwr;  
           let i = i+1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int row, col, offset; 
        let row = 0;
        let col = 0;
        let offset = 0;
        while(row < END_ROW){
            while(col < 32){
                // clears 16 pixels
                SCREEN_START[offset] = 0;
                let col = col + 1;
                let offset = offset + 1;
            }
            let col = 0;
            let row = row+1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let COLOR = b;
        return;
    }


    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
       var int offset, ymod, bitmask, pixels; 
       let ymod = y - ((y/16)*16);
       let offset = x*32 + ymod;
       let bitmask = powersOfTwo[ymod];
       
       if(COLOR){
           let pixels = SCREEN_START[offset] | bitmask;
       }else {
           let bitmask = ~bitmask;
           let pixels = SCREEN_START[offset] & bitmask;
       }
       let SCREEN_START[offset] = pixels;
       return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a,b,dx,dy, diff, tmp;
        let dx = Math.abs(x2-x1);
        let dy = Math.abs(y2-y1);
        let a = 0;
        let b = 0;
        let diff = 0;
        
        while(~((a>dx) | (b>dy))){
            do Screen.drawPixel(x1 + a, y1 +b);
            if(diff < 0){
                let a = a+1;
                let diff = diff + dy;
            }else {
                let b = b+1;
                let diff = diff - dx;
            }
            
        }
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
    }
}
