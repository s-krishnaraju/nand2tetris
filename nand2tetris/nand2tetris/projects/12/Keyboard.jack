// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack
/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
    static int addr; 

    /** Initializes the keyboard. */
    function void init() {
        let addr = 24576;
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return Memory.peek(addr);
    }

    /**	Waits until a key is pressed on the keyboard and released,
     *  then echoes the key to the screen, and returns the character 
     *  of the pressed key. */
    function char readChar() {
        var char c;
        let c = Keyboard.getCharPressed();
        do Output.printChar(c);
        return c;
    }

    function char getCharPressed(){
        var char c;
        while(Keyboard.keyPressed() = 0){}
        let c = Keyboard.keyPressed();
        while(~(Keyboard.keyPressed() = 0)){}
        return c;
    }

    /**	Displays the message on the screen, reads from the keyboard the entered
     *  text until a newline character is detected, echoes the text to the screen,
     *  and returns its value. Also handles user backspaces. */
    function String readLine(String message) {
        var char c;
        var String s, tmp;
        var int maxLen, i, currLen;

        let maxLen = 0;
        let currLen = 0;
        let s = String.new(maxLen);

        do Output.printString("HIHIIHIHI");
        do Output.printString(message);
        while(true){
            let c = Keyboard.getCharPressed();
            // newline
            if(c=128){
                do Output.println();
                return s;
            }else {
                // backspace
                if(c=129){
                    if(currLen > 0){
                        do s.eraseLastChar();
                        do Output.backSpace();
                        let currLen = currLen - 1;
                    }
                }
                else{
                    if (~(currLen < maxLen)){
                        let maxLen = maxLen + 5;
                        let tmp = String.new(maxLen);
                        let i = 0;
                        while(i < currLen){
                            do tmp.appendChar(s.charAt(i));
                            let i = i+1;
                        }
                        
                        do s.dispose();
                        let s = tmp;
                    }
                    do s.appendChar(c);
                    do Output.printChar(c);
                    let currLen = currLen + 1;
                }
            }
        }
    }   

    /** Displays the message on the screen, reads from the keyboard the entered
     *  text until a newline character is detected, echoes the text to the screen,
     *  and returns its integer value (until the first non-digit character in the
     *  entered text is detected). Also handles user backspaces. */
    function int readInt(String message) {
        var char c;
        var String s, tmp;
        var int maxLen, i, currLen;

        let maxLen = 0;
        let currLen = 0;
        let s = String.new(maxLen);

        do Output.printString(message);
        while(true){
            let c = Keyboard.getCharPressed();
            // newline
            if(c=128){
                do Output.println();
                return s.intValue();
            }else {
                // backspace
                if(c=129){
                    if(currLen > 0){
                        do s.eraseLastChar();
                        do Output.backSpace();
                        let currLen = currLen - 1;
                    }
                }
                else{
                    if (~(currLen < maxLen)){
                        let maxLen = maxLen + 5;
                        let tmp = String.new(maxLen);
                        let i = 0;
                        while(i < currLen){
                            do tmp.appendChar(s.charAt(i));
                            let i = i+1;
                        }
                        
                        do s.dispose();
                        let s = tmp;
                    }
                    do s.appendChar(c);
                    do Output.printChar(c);
                    let currLen = currLen + 1;
                }
            }
        }
    
    }
}
