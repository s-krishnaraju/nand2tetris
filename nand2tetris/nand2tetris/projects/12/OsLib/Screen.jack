// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */


class Screen {
    static int SCREEN_START, END_ROW, END_COL;
    static boolean COLOR;
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)


    // one pixel is one bit
    /** Initializes the Screen. */
    function void init() {
        var int i, pwr;
        // each pixel is one bit
        // so 16 pixels per word and 32*16 (512) per row
        let END_ROW = 256;
        let END_COL = 512; 
        let SCREEN_START = 16384;
        let COLOR = true;

        let powersOfTwo = Array.new(16);
        let pwr = 1;
        let i = 0;
        while(i<16){
           let powersOfTwo[i] = pwr;
           let pwr = pwr + pwr;  
           let i = i+1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        do Screen.fillRect(0,0,END_ROW-1,32, false);
        return;
    }

    function void fillRect(int startRow, int startCol, int endRow, int endCol, boolean color){
        var int row, col, offset; 
        let row = startRow;
        let col = startCol;
        let offset = row*32;
        while(~(row > endRow)){
            while(col < endCol){
                // colors 16 pixels
                let SCREEN_START[offset+col] = color;
                let col = col + 1;
            }
            let offset = offset + 32;
            let col = startCol;
            let row = row+1;
        }
        return;
    }

   /** Sets the current color, to be used for all subsequent drawXXX commands.
    *  Black is represented by true, white by false. */
   function void setColor(boolean b) {
       let COLOR = b;
       return;
   }


    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
       var int offset, xmod, divx, bitmask, pixels; 
       let divx = x/16;
       let xmod = x - (divx*16);
       let offset = y*32 + divx;
       let bitmask = powersOfTwo[xmod];
       
       if(COLOR){
           let pixels = SCREEN_START[offset] | bitmask;
       }else {
           let bitmask = ~bitmask;
           let pixels = SCREEN_START[offset] & bitmask;
       }
       let SCREEN_START[offset] = pixels;
       return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    // optimize drawing horizontal lines
    function void drawLine(int x1, int y1, int x2, int y2) {
        var boolean ydir; // down = true, up = false
        var int a,b,dx,dy, diff, tmp, modx, onbitmask, offbitmask, divx;
        let dx = Math.abs(x2-x1);
        let dy = Math.abs(y2-y1);
        let a = 0;
        let b = 0;
        let diff = 0;
        // make x1 < x2
        if (x1 > x2){
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }

        // handle horizontal line
//        if(y1 = y2){
//            let modx = x1&15;
//            let divx = x1 / 16;
//            // turns on bits at pixel to end of word 
//            let onbitmask = ~(powersOfTwo[modx]-1);
//            // 
//            let offbitmask = ~onbitmask;
//            let offset = y1*32 + divx;
//        }

        let ydir = y1 < y2;

         
        
        while((a<dx) | (b<dy)) {
            if(ydir){
                do Screen.drawPixel(x1 + a, y1 +b);
            }else{ 
                do Screen.drawPixel(x1 + a, y1-b);
            }
            if(diff < 0){
                if(~(a=dx)){
                    let a = a+1;
                }
                let diff = diff + dy;
            }else {
                if(~(b=dy)){
                    let b = b+1;
                }
                let diff = diff - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int divx, modx1, modx2, startx, endx, offset, i;
        var int onbitmask1, offbitmask1, onbitmask2,offbitmask2;


        // 512 pixels per row, so 32 cols (16 pixels per col/word) and 256 rows 
        // so 8192 memory words used for the screen

        let modx1 = x1 & 15;
        let startx = x1/16; 
        // turns on bits from x1 to end of col
        let onbitmask1 = ~(powersOfTwo[modx1]-1);
        let offbitmask1 = ~onbitmask1;

        let modx2 = x2 & 15;
        let endx = x2/16; 
        // turns on bits from start of col to x2
        let onbitmask2 = (powersOfTwo[modx2]-1) | powersOfTwo[modx2];
        let offbitmask2 = ~onbitmask2;
        
        // handle if both are in same col
        if(startx = endx){
            let onbitmask1 = onbitmask1 & onbitmask2;
            let offbitmask1 = ~onbitmask1;
        }
        

        // handle first col
        let i = y1;
        let offset = y1*32 + startx;
        while(~(i > y2)){
            if (COLOR){
                let SCREEN_START[offset] = onbitmask1 | SCREEN_START[offset];
            }else {
                let SCREEN_START[offset] = offbitmask1 & SCREEN_START[offset]; 
            }
            let i = i+1;
            let offset = offset + 32;
        }

        // if both are in same col then we drew it already
        if(startx = endx) {
            return;
        }


        // handle last col
        let i = y1;
        let offset = y1*32 + endx;
        while(~(i > y2)){
            if (COLOR){
                let SCREEN_START[offset] = onbitmask2 | SCREEN_START[offset];
            }else {
                let SCREEN_START[offset] = offbitmask2 & SCREEN_START[offset];
            }
            let i = i+1;
            let offset = offset + 32;
        }

        // fill in cols btwn first and last 
        if((startx+1) < endx){
            do Screen.fillRect(y1,startx+1,y2,endx, COLOR);
        }

        return;
    }
    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy,dx,rsqr,x1,x2,top,bot;
        let dy = 0;
        let rsqr = r*r;

        while(~(dy=r)){
            let dx = Math.sqrt(rsqr - (dy*dy));
            let x1 = x-dx;
            let x2 = x+dx;
            let top = y+dy;
            let bot = y-dy;
            do Screen.drawLine(x1, top, x2, top);
            do Screen.drawLine(x1, bot, x2, bot);
            let dy = dy + 1;
        }
        
        return;
    }
}   



