// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static int freeList;

    function void init() {
        var int baseHeap, endHeap, heapSize;
        let memory = 0;
        let baseHeap = 2048;
        let endHeap = 16383;
        let heapSize = endHeap - baseHeap;
        let freeList = baseHeap;
        // set size
        let freeList[0] = heapSize;
        // zero next pointer 
        let freeList[1] = 0;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
       var boolean found; 
       var int prevBlock, currBlock, nextBlock, blockSize, requiredSize;
       let prevBlock = 0;
       let currBlock = freeList;
       // we need two words for size and next ptr
       let requiredSize = size + 2;

       // NOTE: can we return early here or only at end of func?
       while(~found){
           if (currBlock = 0){
             // we reached end of list so do defragmentation and try again
             return 0;
           }

           let blockSize = currBlock[0];
           if (requiredSize < (blockSize+1)) {
              if(requiredSize = blockSize){
                // remove completely
                let nextBlock = currBlock[1];
              } else {
                // split block
                let nextBlock = currBlock + requiredSize;
                // set sizes 
                let currBlock[0] = requiredSize;
                let nextBlock[0] = blockSize - requiredSize;
                // set next ptr
                let nextBlock[1] = currBlock[1];
              }

              // currBlock is first/freeList 
              if(prevBlock = 0){
                let freeList = nextBlock;
              } else {
                // link prev block to next block
                let prevBlock[1] = nextBlock;
              }
              return currBlock + 2; // we don't want to give addr w/ access to the size/nextptr data
           } else {
               let prevBlock = currBlock;
               // set to next ptr
               let currBlock = currBlock[1];
           }
       }

      return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // o[-2] size 
        // o[-1] next ptr
        // append block to start
        let o[-1] = freeList; 
        let freeList = o-2;
        return;
    }    
}
