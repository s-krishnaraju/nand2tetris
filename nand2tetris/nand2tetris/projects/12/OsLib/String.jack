// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int maxLen, currLen;
    field Array chars;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        var int i;
        let maxLen = maxLength;
        let currLen = 0;
        if (maxLength = 0){
            let chars = 0;
        } else {
            let chars = Array.new(maxLength);
        }
        let i = 0;
        while(i < maxLength){
          let chars[i] = 0;
          let i = i + 1;
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if(~(maxLen = 0)){
            do chars.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return currLen;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (~(j < currLen)){
            return 0;
        } else {
            return chars[j];
        }
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < currLen){
             let chars[j] = c;
        }     
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        var int i;
        var Array newChars;
        let currLen = currLen + 1;
        if (currLen > maxLen) {
          let newChars = Memory.alloc(maxLen*2);
          let i = 0;
          while(i < maxLen){
            let newChars[i] = chars[i];
            let i = i + 1;
          }
          do chars.dispose();
          let chars = newChars;
          let maxLen = maxLen*2;
        } 
        
        let chars[currLen-1] = c;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(currLen>0){
          let chars[currLen-1] = 0;
          let currLen = currLen - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, val, place, c, d, sign;
        let val = 0;
        let i = 0;
        let sign = 1;
        // check for neg sign
        if (chars[0] = 45) {
            let i = 1;
            let sign = -1;
        }
        while(i<currLen){
          let c = chars[i];
          if ((c < 48) | (c > 57)){ return val; } 
          let d  = c - 48; 
          let val = val*10 + d;
          let i = i + 1; 
        }
        
        return val*sign;
    }

    method int modulo(int n, int d){
      var int i, r;  
      let i = 0;
      while(true){
        let r = n - (d*i);
        if(r<d){
            return r;
        }
        let i = i + 1;
      }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var boolean negative;
        var int i, mod, c, midpoint, tmp; 
        let i = 1;
        let currLen = 0;
        let negative = false;
        if (val < 0){
           let val = val*-1;  
           let negative = true;
        }
        // i != -1 & i <= val
        while((~(i = -1)) & (~(i > val))){
          let mod = modulo(val, i*10); 
          let c = (mod/i) + 48;
          do appendChar(c);
          let i = i*10;
          // overflow check
          if (i = 10000){ 
              let tmp = val/i;
              if(~(tmp = 0)) {
                  let c = tmp + 48;
                  do appendChar(c);
              }
              let i = -1;
          }
        }

        if (negative){
            do appendChar(45);
        }

        // reverse chars 
        let i = 0;
        let midpoint = currLen/2;
        while(i<midpoint){
            let tmp = chars[i];
            let chars[i] = chars[currLen-1-i];
            let chars[currLen-1-i] = tmp;
            let i = i+1;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
