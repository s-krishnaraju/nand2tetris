class Pong {
  field Ball ball;  
  field Paddle paddle;
  field boolean exit; 
  field int direction;
  field int floor; // where ball will collide w/ paddle

  constructor Pong new(){
   let floor = 230;
   let ball = Ball.new(8,8,floor);
   let paddle = Paddle.new(50, 5, floor);
   let exit = false;
   let direction = 2;
   return this;
  }

  method void handleCollision(){
      var boolean rCollide;
      var boolean lCollide;
      var boolean uCollide;
      var boolean dCollide;

      let rCollide = ~(ball.getRightX() < (512-2));
      let lCollide = ~(ball.getX() > 1);

      var boolean pc1;
      var boolean pc2;
      var boolean paddleCollide;

      let pc1 = (ball.getX() < paddle.getRightX()) & (ball.getX() > paddle.getX());
      let pc2 = (ball.getX() < paddle.getX()) & (ball.getRightX() > paddle.getX());
      let paddleCollide = paddleCollide1 & paddleCollide2;

      if(rCollide){
          do ball.setXDir(-1);
      }
      if(lCollide){
          do ball.setXDir(1);
      }
      if(uCollide){
          do ball.setYDir(1);
      }
      if(dCollide){
          do ball.setYDir(-1);
      }
      return;
  }

  method void moveObjects(){
    do handleCollision();

    if (direction = 1){ 
      do paddle.moveLeft();
    }

    if (direction = 2){ 
      do paddle.moveRight();
    }

    do ball.move();
    do Sys.wait(20);
    return;
  }

  method void run(){
    var char key;
    var boolean exit;
    let exit = false;

    while(~exit){
        let key = Keyboard.keyPressed();

        if (key = 130) { let direction = 1; }   // left arrow
        if (key = 132) { let direction = 2; }   // right arrow
        if ( key = 81 ) { let exit = true;}  // q key 

        do moveObjects();
    }
    return;
  }

  method void dispose(){
    do Memory.deAlloc(this);
    do paddle.dispose();
    do ball.dispose();
    return;
  }

}
